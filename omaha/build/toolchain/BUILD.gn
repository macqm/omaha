toolchain("msvc") {
    cc = "cl.exe"
    cxx = "cl.exe"
    ar = "lib.exe"
    ld = "link.exe"
    helper_path = rebase_path("win_helper.py")
    tool("cc") {
        depfile = "{{output}}.d"
        command = "$cc /nologo /showIncludes {{defines}} {{include_dirs}} {{cflags}} {{cflags_c}} /c {{source}} /Fo{{output}}"
        depsformat = "msvc"
        description = "CC {{output}}"
        outputs = [
            "{{source_out_dir}}/{{target_output_name}}.{{source_name_part}}.obj"
        ]
    }
    tool("cxx") {
        depfile = "{{output}}.d"
        command = "$cxx /nologo /showIncludes {{defines}} {{include_dirs}} {{cflags}} {{cflags_c}} /c {{source}} /Fo{{output}}"
        depsformat = "msvc"
        description = "CXX {{output}}"
        outputs = [
        "{{source_out_dir}}/{{target_output_name}}.{{source_name_part}}.obj",
        ]
    }
    tool("alink") {
        command = "$ar /nologo /out:{{output}} {{arflags}} {{inputs}}"
        description = "LIB {{output}}"
        outputs = [
        "{{target_out_dir}}/{{target_output_name}}{{output_extension}}",
        ]
        default_output_extension = ".lib"
        output_prefix = ""
    }
    tool("link") {
        outputs = [
        "{{root_out_dir}}/{{target_output_name}}{{output_extension}}",
        ]
        command = "$ld /nologo /OUT:{{output}} {{ldflags}} {{inputs}} {{solibs}} {{libs}}"
        description = "LINK {{output}}"
        default_output_extension = ".exe"
    }
    tool("solink") {
      dllname = "{{output_dir}}/{{target_output_name}}{{output_extension}}"  # e.g. foo.dll
      libname = "${dllname}.lib"  # e.g. foo.dll.lib
      pdbname = "${dllname}.pdb"
      rspfile = "${dllname}.rsp"

      command = "$ld /nologo {{ldflags}} /IMPLIB:$libname /DLL /OUT:$dllname /PDB:$pdbname @$rspfile"

      default_output_extension = ".dll"
      default_output_dir = "{{root_out_dir}}"
      description = "LINK(DLL) {{output}}"
      outputs = [
        dllname,
        libname,
        pdbname,
      ]
      link_output = libname
      depend_output = libname
      runtime_outputs = [ dllname ]

      # Since the above commands only updates the .lib file when it changes, ask
      # Ninja to check if the timestamp actually changed to know if downstream
      # dependencies should be recompiled.
      restat = true

      # The use of inputs_newline is to work around a fixed per-line buffer
      # size in the linker.
      rspfile_content = "{{libs}} {{solibs}} {{inputs_newline}} {{ldflags}}"
    }
    tool("stamp") {
        command = "$python_path $helper_path stamp {{output}}"
        description = "STAMP {{output}}"
    }
}